// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace OptimalApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201114190628_init3")]
    partial class init3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("OptimalApi.Models.DataBase.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentAccountID")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountTypeID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("ParentAccountID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<int>("DefaultAccountID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContactStatusID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.EventLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Column")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PKID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Invite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<int>("ExpirationInHours")
                        .HasColumnType("int");

                    b.Property<int>("FromContactID")
                        .HasColumnType("int");

                    b.Property<int>("InviteStatusID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("ToMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("FromContactID");

                    b.HasIndex("InviteStatusID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("Invite");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.LoanApplication", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("BusinessAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessOpenDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<string>("CreditTarget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditTargetDetailes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaamNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthCredit")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestCreditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("LoanApplication");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.LoanRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LoanApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("LoanApplicationID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("LoanRequest");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LoanApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("LoanApplicationID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.xAccountContact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<int?>("InviteID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("InviteID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("xAccountContact");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.xLoanRequestFinancialInstitution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByID1")
                        .HasColumnType("int");

                    b.Property<int>("FinancialInstitutionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LoanRequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UpdatedByID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID1");

                    b.HasIndex("FinancialInstitutionID");

                    b.HasIndex("LoanRequestID");

                    b.HasIndex("UpdatedByID1");

                    b.ToTable("xLoanRequestFinancialInstitution");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.zAccountStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("zAccountStatus");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.zAccountType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("zAccountType");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.zAddressType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("zAddressType");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.zContactStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("zContactStatus");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.zFinancialInstitution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("zFinancialInstitution");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.zInviteStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("zInviteStatus");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Account", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.zAccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.Account", "ParentAccount")
                        .WithMany()
                        .HasForeignKey("ParentAccountID");

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("AccountType");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentAccount");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Contact", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.zContactStatus", "ContactStatus")
                        .WithMany()
                        .HasForeignKey("ContactStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("ContactStatus");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Invite", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.Contact", "FromContact")
                        .WithMany()
                        .HasForeignKey("FromContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.zInviteStatus", "InviteStatus")
                        .WithMany()
                        .HasForeignKey("InviteStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("CreatedBy");

                    b.Navigation("FromContact");

                    b.Navigation("InviteStatus");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.LoanApplication", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.LoanRequest", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("LoanApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("CreatedBy");

                    b.Navigation("LoanApplication");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Order", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("LoanApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("CreatedBy");

                    b.Navigation("LoanApplication");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.OrderItem", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.Product", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.User", b =>
                {
                    b.OwnsMany("OptimalApi.Models.DataBase.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("UserID")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("UserID");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserID");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.xAccountContact", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.Invite", "Invite")
                        .WithMany()
                        .HasForeignKey("InviteID");

                    b.HasOne("OptimalApi.Models.DataBase.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("Account");

                    b.Navigation("Contact");

                    b.Navigation("CreatedBy");

                    b.Navigation("Invite");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("OptimalApi.Models.DataBase.xLoanRequestFinancialInstitution", b =>
                {
                    b.HasOne("OptimalApi.Models.DataBase.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID1");

                    b.HasOne("OptimalApi.Models.DataBase.zFinancialInstitution", "FinancialInstitution")
                        .WithMany()
                        .HasForeignKey("FinancialInstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.LoanRequest", "LoanRequest")
                        .WithMany()
                        .HasForeignKey("LoanRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptimalApi.Models.DataBase.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByID1");

                    b.Navigation("CreatedBy");

                    b.Navigation("FinancialInstitution");

                    b.Navigation("LoanRequest");

                    b.Navigation("UpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
